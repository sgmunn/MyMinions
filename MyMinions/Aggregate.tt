// <auto-generated />
// Aggregate v1
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ output extension=".cs" #>
<#+
    public class EventMemberInfo
    {
        public string DataType { get; set; }
        public string Name { get; set; }
        public bool IsRequired { get; set; }
        public bool IsCollection { get; set; }
        public bool RequiresInitialization { get; set; }
    }

    public class EventInfo	
    {
        public EventInfo(string name)
        {
            this.Values = new List<EventMemberInfo>();
            this.Name = name;
			this.EventSuffix = "Set";
			this.CommandPrefix = "Set";
        }

        public EventInfo(string name, IEnumerable<EventMemberInfo> values)
        {
            this.Values = new List<EventMemberInfo>(values);
            this.Name = name;
			this.EventSuffix = "Set";
			this.CommandPrefix = "Set";
        }

        public EventInfo(string name, string cmdPrefix, string evtSuffix)
        {
            this.Values = new List<EventMemberInfo>();
            this.Name = name;
			this.EventSuffix = evtSuffix;
			this.CommandPrefix = cmdPrefix;
        }

        public EventInfo(string name, string cmdPrefix, string evtSuffix, IEnumerable<EventMemberInfo> values)
        {
            this.Values = new List<EventMemberInfo>(values);
            this.Name = name;
			this.EventSuffix = evtSuffix;
			this.CommandPrefix = cmdPrefix;
        }
        
        public string Name { get; private set; }

        public string CommandPrefix { get; private set; }

        public string EventSuffix { get; private set; }

        public List<EventMemberInfo> Values { get; private set; }

		public bool HasCollections
		{
			get
			{
				return this.Values.Any(x => x.IsCollection);
			}
		}
    }

    public class AggregateTemplate : TextTransformation
    {
        public AggregateTemplate(string name, string dataNamespace, IEnumerable<EventInfo> events)
        {
            this.Events = new List<EventInfo>(events);
            this.Name = name;
            this.Namespace = dataNamespace;
			this.AllowDeletion = true;
        }

        public string Name { get; private set; }
        public string Namespace { get; private set; }
        public List<EventInfo> Events { get; private set; }
		public bool AllowDeletion { get; set; }			

        public override string TransformText()
        {
#>

// define datacontract namespace 
namespace QuotePlus.DomainModel.<#=this.Name#>
{
    using System;

    public static class <#=this.Name#>Namespace
    {
        public const string Namespace = "<#=this.Namespace#>";
    }
}

// define events
namespace QuotePlus.DomainModel.<#=this.Name#>.Events
{
    using System;
	using System.Collections.ObjectModel;
    using System.Runtime.Serialization;
    //using Dnstech.DomainModel;
    //using Dnstech.DomainModel.EventSourcing;

<#+ foreach (var evt in this.Events)
{#>
    [DataContract(Name = "<#=evt.Name#><#=evt.EventSuffix#>", Namespace = <#=this.Name#>Namespace.Namespace)]
    public sealed class <#=evt.Name#><#=evt.EventSuffix#>Event : DomainEvent<<#=this.Name#>Id>
    {
		public <#=evt.Name#><#=evt.EventSuffix#>Event()
		{
			this.Initialize(new StreamingContext());
		}
<#+ foreach (var prop in evt.Values) { #>

        [DataMember]
        public <#=prop.DataType#> <#=prop.Name#> { get;<#+ if(prop.IsCollection == true) { #> private<#+ } #> set; }
<#+ } #>
	
		[OnDeserialized]
		private void Initialize(StreamingContext context)
		{
<#+ foreach (var prop in evt.Values.Where(x => x.RequiresInitialization)) { #>
		    this.<#=prop.Name#> = this.<#=prop.Name#> ?? new <#=prop.DataType#>();
<#+ } #>
		}
    }

<#+ } #>
<#+ if(this.AllowDeletion == true) { #>
    [DataContract(Name = "<#=this.Name#>Deleted", Namespace = <#=this.Name#>Namespace.Namespace)]
    public sealed class <#=this.Name#>DeletedEvent : DomainEvent<<#=this.Name#>Id>, IAggregateDeletionEvent
    {
    }
<#+ } #>
}

// define commands
namespace QuotePlus.DomainModel.<#=this.Name#>.Commands
{
    using System;
	using System.Collections.ObjectModel;
    using System.Runtime.Serialization;
    //using Dnstech.DomainModel;
	//using QuotePlus.DomainModel.<#=this.Name#>.Events;

<#+ foreach (var evt in this.Events)
{#>
    [DataContract(Name = "<#=evt.CommandPrefix#><#=evt.Name#>", Namespace = <#=this.Name#>Namespace.Namespace)]
    public sealed class <#=evt.CommandPrefix#><#=evt.Name#>Command : DomainCommand<<#=this.Name#>Id>
    {
		public <#=evt.CommandPrefix#><#=evt.Name#>Command()
		{
			this.Initialize(new StreamingContext());
		}
<#+ foreach (var prop in evt.Values) { #>

        [DataMember]
        public <#=prop.DataType#> <#=prop.Name#> { get;<#+ if(prop.IsCollection == true) { #> private<#+ } #> set; }
<#+ } #>
	
		[OnDeserialized]
		private void Initialize(StreamingContext context)
		{
<#+ foreach (var prop in evt.Values.Where(x => x.RequiresInitialization)) { #>
		    this.<#=prop.Name#> = this.<#=prop.Name#> ?? new <#=prop.DataType#>();
<#+ } #>
		}
    }

<#+ } #>
<#+ if(this.AllowDeletion == true) { #>
    [DataContract(Name = "Delete<#=this.Name#>", Namespace = <#=this.Name#>Namespace.Namespace)]
    public sealed class Delete<#=this.Name#>Command : DomainCommand<<#=this.Name#>Id>
    {
    }
<#+ } #>
}

// define aggregate
namespace QuotePlus.DomainModel.<#=this.Name#>.Aggregates
{
    using System;
	using Dnstech.Collections;
    using Dnstech.DomainModel;
	using QuotePlus.DomainModel.<#=this.Name#>.Commands;
	using QuotePlus.DomainModel.<#=this.Name#>.Events;

    public sealed partial class <#=this.Name#>Aggregate : AggregateRoot<<#=this.Name#>Id>
    {
        public bool IsEmpty<T>(T a)
        {
			if (a == null)
			{
				return true;
			}

            var x = default(T);
            return (a.Equals(x));
        }
<#+ foreach (var evt in this.Events)
{#>

		public void Execute(<#=evt.CommandPrefix#><#=evt.Name#>Command command)
		{
			this.Validate(command);

            var evt = new <#=evt.Name#><#=evt.EventSuffix#>Event
            {
                AggregateRootId = this.AggregateRootId.Value,
                Version = this.NextVersion,
<#+ foreach (var prop in evt.Values.Where(x => !x.IsCollection)) { #>
                <#=prop.Name#> = command.<#=prop.Name#>,
<#+ } #>
            };

<#+ foreach (var prop in evt.Values.Where(x => x.IsCollection)) { #>
		    evt.<#=prop.Name#>.AddAll(command.<#=prop.Name#>);
<#+ } #>

			this.ApplyEvent(evt);
		}

		public void Validate(<#=evt.CommandPrefix#><#=evt.Name#>Command command)
		{
			var validation = this.CreateValidation(command);

<#+ foreach (var prop in evt.Values.Where(x => x.IsRequired && x.DataType.ToUpper() == "STRING")) { #>
			if (string.IsNullOrWhiteSpace(command.<#=prop.Name#>))
			{
			    validation.AddPropertyException("<#=prop.Name#>", "<#=prop.Name#> is required");
			}

<#+ } #>

<#+ foreach (var prop in evt.Values.Where(x => x.IsRequired && x.DataType.ToUpper() != "STRING")) { #>
			if (this.IsEmpty(command.<#=prop.Name#>))
			{
				validation.AddPropertyException("<#=prop.Name#>", "<#=prop.Name#> is required");
			}

<#+ } #>
			this.DoAdditionalValidation(command, validation);

            validation.ThrowIfRequired();
		}

        public void Apply(<#=evt.Name#><#=evt.EventSuffix#>Event domainEvent)
        {
        }
<#+ } #>
<#+ if(this.AllowDeletion == true) { #>

		public void Execute(Delete<#=this.Name#>Command command)
		{
			this.Validate(command);

            this.ApplyEvent(new <#=this.Name#>DeletedEvent
            {
                AggregateRootId = this.AggregateRootId.Value,
                Version = this.NextVersion,
            });
		}

		public void Validate(Delete<#=this.Name#>Command command)
		{
			var validation = this.CreateValidation(command);
			this.DoAdditionalValidation(command, validation);
            validation.ThrowIfRequired();
		}

		public void Apply(<#=this.Name#>DeletedEvent domainEvent)
		{
		}
<#+ } #>

		partial void DoAdditionalValidation<TCommand>(TCommand command, Validation<TCommand> validation) where TCommand : IDomainCommand; 
	}
}

<#+         return GenerationEnvironment.ToString();
        }
    }
#>
