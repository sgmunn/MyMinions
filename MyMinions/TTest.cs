// <auto-generated />
// Aggregate v1

// define datacontract namespace 
namespace QuotePlus.DomainModel.QuotingProfile
{
    using System;

    public static class QuotingProfileNamespace
    {
        public const string Namespace = "urn:QuotingProfile";
    }
}

// define events
namespace QuotePlus.DomainModel.QuotingProfile.Events
{
    using System;
	using System.Collections.ObjectModel;
    using System.Runtime.Serialization;
    using Dnstech.DomainModel;
    using Dnstech.DomainModel.EventSourcing;

    [DataContract(Name = "QuotingProfileInfoSet", Namespace = QuotingProfileNamespace.Namespace)]
    public sealed class QuotingProfileInfoSetEvent : DomainEvent<QuotingProfileId>
    {
		public QuotingProfileInfoSetEvent()
		{
			this.Initialize(new StreamingContext());
		}

        [DataMember]
        public string Name { get; set; }

        [DataMember]
        public Guid AllowanceProfileId { get; set; }

        [DataMember]
        public string HoursUnitSingularLabel { get; set; }

        [DataMember]
        public string HoursUnitPluralLabel { get; set; }
	
		[OnDeserialized]
		private void Initialize(StreamingContext context)
		{
		}
    }

    [DataContract(Name = "LabourInputModesSet", Namespace = QuotingProfileNamespace.Namespace)]
    public sealed class LabourInputModesSetEvent : DomainEvent<QuotingProfileId>
    {
		public LabourInputModesSetEvent()
		{
			this.Initialize(new StreamingContext());
		}

        [DataMember]
        public LabourInputMode RemoveRefitInputMode { get; set; }

        [DataMember]
        public LabourInputMode RepairInputMode { get; set; }

        [DataMember]
        public LabourInputMode PaintInputMode { get; set; }

        [DataMember]
        public LabourInputMode MechanicalInputMode { get; set; }
	
		[OnDeserialized]
		private void Initialize(StreamingContext context)
		{
		}
    }

    [DataContract(Name = "PrintOptionsSet", Namespace = QuotingProfileNamespace.Namespace)]
    public sealed class PrintOptionsSetEvent : DomainEvent<QuotingProfileId>
    {
		public PrintOptionsSetEvent()
		{
			this.Initialize(new StreamingContext());
		}

        [DataMember]
        public Guid SummaryFormatId { get; set; }

        [DataMember]
        public Guid DetailFormatId { get; set; }

        [DataMember]
        public Guid LabourStyleId { get; set; }

        [DataMember]
        public bool SupplementariesItemise { get; set; }

        [DataMember]
        public bool SupplementariesStartANewPage { get; set; }

        [DataMember]
        public bool ItemiseAllParts { get; set; }

        [DataMember]
        public bool ShowPartNumbers { get; set; }

        [DataMember]
        public bool ShowListPrice { get; set; }

        [DataMember]
        public bool ShowMarkupSeparately { get; set; }

        [DataMember]
        public bool StartANewPage { get; set; }
	
		[OnDeserialized]
		private void Initialize(StreamingContext context)
		{
		}
    }

    [DataContract(Name = "DefaultLabourRatesSet", Namespace = QuotingProfileNamespace.Namespace)]
    public sealed class DefaultLabourRatesSetEvent : DomainEvent<QuotingProfileId>
    {
		public DefaultLabourRatesSetEvent()
		{
			this.Initialize(new StreamingContext());
		}

        [DataMember]
        public decimal RemoveRefitLabourRate { get; set; }

        [DataMember]
        public decimal RepairLabourRate { get; set; }

        [DataMember]
        public PaintHourlyRateEventContract PaintLabourRate { get; set; }

        [DataMember]
        public decimal MechanicalLabourRate { get; set; }

        [DataMember]
        public Collection<PaintHourlyRateEventContract> PaintRates { get; private set; }
	
		[OnDeserialized]
		private void Initialize(StreamingContext context)
		{
		    this.PaintLabourRate = this.PaintLabourRate ?? new PaintHourlyRateEventContract();
		    this.PaintRates = this.PaintRates ?? new Collection<PaintHourlyRateEventContract>();
		}
    }

    [DataContract(Name = "MarkupRatesSet", Namespace = QuotingProfileNamespace.Namespace)]
    public sealed class MarkupRatesSetEvent : DomainEvent<QuotingProfileId>
    {
		public MarkupRatesSetEvent()
		{
			this.Initialize(new StreamingContext());
		}

        [DataMember]
        public decimal NewRate { get; set; }

        [DataMember]
        public decimal UsedRate { get; set; }

        [DataMember]
        public decimal ExchangedRate { get; set; }

        [DataMember]
        public decimal AftermarketRate { get; set; }

        [DataMember]
        public decimal ReconditionedRate { get; set; }

        [DataMember]
        public decimal NetNewRate { get; set; }

        [DataMember]
        public decimal NonGenuineRate { get; set; }

        [DataMember]
        public decimal SubletRate { get; set; }
	
		[OnDeserialized]
		private void Initialize(StreamingContext context)
		{
		}
    }

    [DataContract(Name = "QuotingProfileDeleted", Namespace = QuotingProfileNamespace.Namespace)]
    public sealed class QuotingProfileDeletedEvent : DomainEvent<QuotingProfileId>, IAggregateDeletionEvent
    {
    }
}

// define commands
namespace QuotePlus.DomainModel.QuotingProfile.Commands
{
    using System;
	using System.Collections.ObjectModel;
    using System.Runtime.Serialization;
    using Dnstech.DomainModel;
	using QuotePlus.DomainModel.QuotingProfile.Events;

    [DataContract(Name = "SetQuotingProfileInfo", Namespace = QuotingProfileNamespace.Namespace)]
    public sealed class SetQuotingProfileInfoCommand : DomainCommand<QuotingProfileId>
    {
		public SetQuotingProfileInfoCommand()
		{
			this.Initialize(new StreamingContext());
		}

        [DataMember]
        public string Name { get; set; }

        [DataMember]
        public Guid AllowanceProfileId { get; set; }

        [DataMember]
        public string HoursUnitSingularLabel { get; set; }

        [DataMember]
        public string HoursUnitPluralLabel { get; set; }
	
		[OnDeserialized]
		private void Initialize(StreamingContext context)
		{
		}
    }

    [DataContract(Name = "SetLabourInputModes", Namespace = QuotingProfileNamespace.Namespace)]
    public sealed class SetLabourInputModesCommand : DomainCommand<QuotingProfileId>
    {
		public SetLabourInputModesCommand()
		{
			this.Initialize(new StreamingContext());
		}

        [DataMember]
        public LabourInputMode RemoveRefitInputMode { get; set; }

        [DataMember]
        public LabourInputMode RepairInputMode { get; set; }

        [DataMember]
        public LabourInputMode PaintInputMode { get; set; }

        [DataMember]
        public LabourInputMode MechanicalInputMode { get; set; }
	
		[OnDeserialized]
		private void Initialize(StreamingContext context)
		{
		}
    }

    [DataContract(Name = "SetPrintOptions", Namespace = QuotingProfileNamespace.Namespace)]
    public sealed class SetPrintOptionsCommand : DomainCommand<QuotingProfileId>
    {
		public SetPrintOptionsCommand()
		{
			this.Initialize(new StreamingContext());
		}

        [DataMember]
        public Guid SummaryFormatId { get; set; }

        [DataMember]
        public Guid DetailFormatId { get; set; }

        [DataMember]
        public Guid LabourStyleId { get; set; }

        [DataMember]
        public bool SupplementariesItemise { get; set; }

        [DataMember]
        public bool SupplementariesStartANewPage { get; set; }

        [DataMember]
        public bool ItemiseAllParts { get; set; }

        [DataMember]
        public bool ShowPartNumbers { get; set; }

        [DataMember]
        public bool ShowListPrice { get; set; }

        [DataMember]
        public bool ShowMarkupSeparately { get; set; }

        [DataMember]
        public bool StartANewPage { get; set; }
	
		[OnDeserialized]
		private void Initialize(StreamingContext context)
		{
		}
    }

    [DataContract(Name = "SetDefaultLabourRates", Namespace = QuotingProfileNamespace.Namespace)]
    public sealed class SetDefaultLabourRatesCommand : DomainCommand<QuotingProfileId>
    {
		public SetDefaultLabourRatesCommand()
		{
			this.Initialize(new StreamingContext());
		}

        [DataMember]
        public decimal RemoveRefitLabourRate { get; set; }

        [DataMember]
        public decimal RepairLabourRate { get; set; }

        [DataMember]
        public PaintHourlyRateEventContract PaintLabourRate { get; set; }

        [DataMember]
        public decimal MechanicalLabourRate { get; set; }

        [DataMember]
        public Collection<PaintHourlyRateEventContract> PaintRates { get; private set; }
	
		[OnDeserialized]
		private void Initialize(StreamingContext context)
		{
		    this.PaintLabourRate = this.PaintLabourRate ?? new PaintHourlyRateEventContract();
		    this.PaintRates = this.PaintRates ?? new Collection<PaintHourlyRateEventContract>();
		}
    }

    [DataContract(Name = "SetMarkupRates", Namespace = QuotingProfileNamespace.Namespace)]
    public sealed class SetMarkupRatesCommand : DomainCommand<QuotingProfileId>
    {
		public SetMarkupRatesCommand()
		{
			this.Initialize(new StreamingContext());
		}

        [DataMember]
        public decimal NewRate { get; set; }

        [DataMember]
        public decimal UsedRate { get; set; }

        [DataMember]
        public decimal ExchangedRate { get; set; }

        [DataMember]
        public decimal AftermarketRate { get; set; }

        [DataMember]
        public decimal ReconditionedRate { get; set; }

        [DataMember]
        public decimal NetNewRate { get; set; }

        [DataMember]
        public decimal NonGenuineRate { get; set; }

        [DataMember]
        public decimal SubletRate { get; set; }
	
		[OnDeserialized]
		private void Initialize(StreamingContext context)
		{
		}
    }

    [DataContract(Name = "DeleteQuotingProfile", Namespace = QuotingProfileNamespace.Namespace)]
    public sealed class DeleteQuotingProfileCommand : DomainCommand<QuotingProfileId>
    {
    }
}

// define aggregate
namespace QuotePlus.DomainModel.QuotingProfile.Aggregates
{
    using System;
	using Dnstech.Collections;
    using Dnstech.DomainModel;
	using QuotePlus.DomainModel.QuotingProfile.Commands;
	using QuotePlus.DomainModel.QuotingProfile.Events;

    public sealed partial class QuotingProfileAggregate : AggregateRoot<QuotingProfileId>
    {
        public bool IsEmpty<T>(T a)
        {
			if (a == null)
			{
				return true;
			}

            var x = default(T);
            return (a.Equals(x));
        }

		public void Execute(SetQuotingProfileInfoCommand command)
		{
			this.Validate(command);

            var evt = new QuotingProfileInfoSetEvent
            {
                AggregateRootId = this.AggregateRootId.Value,
                Version = this.NextVersion,
                Name = command.Name,
                AllowanceProfileId = command.AllowanceProfileId,
                HoursUnitSingularLabel = command.HoursUnitSingularLabel,
                HoursUnitPluralLabel = command.HoursUnitPluralLabel,
            };


			this.ApplyEvent(evt);
		}

		public void Validate(SetQuotingProfileInfoCommand command)
		{
			var validation = this.CreateValidation(command);

			if (string.IsNullOrWhiteSpace(command.Name))
			{
			    validation.AddPropertyException("Name", "Name is required");
			}


			this.DoAdditionalValidation(command, validation);

            validation.ThrowIfRequired();
		}

        public void Apply(QuotingProfileInfoSetEvent domainEvent)
        {
        }

		public void Execute(SetLabourInputModesCommand command)
		{
			this.Validate(command);

            var evt = new LabourInputModesSetEvent
            {
                AggregateRootId = this.AggregateRootId.Value,
                Version = this.NextVersion,
                RemoveRefitInputMode = command.RemoveRefitInputMode,
                RepairInputMode = command.RepairInputMode,
                PaintInputMode = command.PaintInputMode,
                MechanicalInputMode = command.MechanicalInputMode,
            };


			this.ApplyEvent(evt);
		}

		public void Validate(SetLabourInputModesCommand command)
		{
			var validation = this.CreateValidation(command);


			this.DoAdditionalValidation(command, validation);

            validation.ThrowIfRequired();
		}

        public void Apply(LabourInputModesSetEvent domainEvent)
        {
        }

		public void Execute(SetPrintOptionsCommand command)
		{
			this.Validate(command);

            var evt = new PrintOptionsSetEvent
            {
                AggregateRootId = this.AggregateRootId.Value,
                Version = this.NextVersion,
                SummaryFormatId = command.SummaryFormatId,
                DetailFormatId = command.DetailFormatId,
                LabourStyleId = command.LabourStyleId,
                SupplementariesItemise = command.SupplementariesItemise,
                SupplementariesStartANewPage = command.SupplementariesStartANewPage,
                ItemiseAllParts = command.ItemiseAllParts,
                ShowPartNumbers = command.ShowPartNumbers,
                ShowListPrice = command.ShowListPrice,
                ShowMarkupSeparately = command.ShowMarkupSeparately,
                StartANewPage = command.StartANewPage,
            };


			this.ApplyEvent(evt);
		}

		public void Validate(SetPrintOptionsCommand command)
		{
			var validation = this.CreateValidation(command);


			this.DoAdditionalValidation(command, validation);

            validation.ThrowIfRequired();
		}

        public void Apply(PrintOptionsSetEvent domainEvent)
        {
        }

		public void Execute(SetDefaultLabourRatesCommand command)
		{
			this.Validate(command);

            var evt = new DefaultLabourRatesSetEvent
            {
                AggregateRootId = this.AggregateRootId.Value,
                Version = this.NextVersion,
                RemoveRefitLabourRate = command.RemoveRefitLabourRate,
                RepairLabourRate = command.RepairLabourRate,
                PaintLabourRate = command.PaintLabourRate,
                MechanicalLabourRate = command.MechanicalLabourRate,
            };

		    evt.PaintRates.AddAll(command.PaintRates);

			this.ApplyEvent(evt);
		}

		public void Validate(SetDefaultLabourRatesCommand command)
		{
			var validation = this.CreateValidation(command);


			if (this.IsEmpty(command.RemoveRefitLabourRate))
			{
				validation.AddPropertyException("RemoveRefitLabourRate", "RemoveRefitLabourRate is required");
			}

			if (this.IsEmpty(command.RepairLabourRate))
			{
				validation.AddPropertyException("RepairLabourRate", "RepairLabourRate is required");
			}

			if (this.IsEmpty(command.PaintLabourRate))
			{
				validation.AddPropertyException("PaintLabourRate", "PaintLabourRate is required");
			}

			if (this.IsEmpty(command.MechanicalLabourRate))
			{
				validation.AddPropertyException("MechanicalLabourRate", "MechanicalLabourRate is required");
			}

			if (this.IsEmpty(command.PaintRates))
			{
				validation.AddPropertyException("PaintRates", "PaintRates is required");
			}

			this.DoAdditionalValidation(command, validation);

            validation.ThrowIfRequired();
		}

        public void Apply(DefaultLabourRatesSetEvent domainEvent)
        {
        }

		public void Execute(SetMarkupRatesCommand command)
		{
			this.Validate(command);

            var evt = new MarkupRatesSetEvent
            {
                AggregateRootId = this.AggregateRootId.Value,
                Version = this.NextVersion,
                NewRate = command.NewRate,
                UsedRate = command.UsedRate,
                ExchangedRate = command.ExchangedRate,
                AftermarketRate = command.AftermarketRate,
                ReconditionedRate = command.ReconditionedRate,
                NetNewRate = command.NetNewRate,
                NonGenuineRate = command.NonGenuineRate,
                SubletRate = command.SubletRate,
            };


			this.ApplyEvent(evt);
		}

		public void Validate(SetMarkupRatesCommand command)
		{
			var validation = this.CreateValidation(command);


			this.DoAdditionalValidation(command, validation);

            validation.ThrowIfRequired();
		}

        public void Apply(MarkupRatesSetEvent domainEvent)
        {
        }

		public void Execute(DeleteQuotingProfileCommand command)
		{
			this.Validate(command);

            this.ApplyEvent(new QuotingProfileDeletedEvent
            {
                AggregateRootId = this.AggregateRootId.Value,
                Version = this.NextVersion,
            });
		}

		public void Validate(DeleteQuotingProfileCommand command)
		{
			var validation = this.CreateValidation(command);
			this.DoAdditionalValidation(command, validation);
            validation.ThrowIfRequired();
		}

		public void Apply(QuotingProfileDeletedEvent domainEvent)
		{
		}

		partial void DoAdditionalValidation<TCommand>(TCommand command, Validation<TCommand> validation) where TCommand : IDomainCommand; 
	}
}

  
